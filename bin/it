#!/usr/bin/python
#
# Command-line access to the base implementation of git-it.
#
import sys, os
import getopt

# Point Python to the lib directory to include libraries
sys.path += [ os.path.abspath(sys.path[0] + '/..') + '/lib' ]
import gitit
import log

def usage():
  print 'usage: it <subcommand> [<options>]'
  print ''
  print 'Valid subcommands are:'
  print '  init      Initializes an area for storing issues.'
  print '  list      Shows a list of all issues.'
  print '  show      Shows details of a specific issue.'
  print '  new       Adds a new issue.'
  print '  edit      Edits an existing issue.'
  print ''
  print 'Changing status:'
  print '  open      Opens an issue.'
  print '  close     Closes an issue.'
  print '  reject    Rejects an issue.'

# Parse input options
opts = []
params = []
try:
  shorts = 'h'
  longs  = [ ]
  opts, params = getopt.getopt(sys.argv[1:], shorts, longs)
except getopt.GetoptError, e:
  log.printerr(e)
  usage()
  sys.exit(1)

# Set variables according to input options
for key, val in opts:
  if key in [ '-h' ]:
    usage()
    sys.exit(0)

# No subcommand?
if len(params) == 0:
  log.printerr('No subcommand specified.')
  usage()
  sys.exit(1)

# Valid subcommand?
subcmd = params[0]
del params[0]
if not subcmd in [ 'init', 'list', 'show', 'new', 'edit', 'open', 'close', 'reject' ]:
  log.printerr('Unknown subcommand \'%s\'.' % subcmd)
  usage()
  sys.exit(1)

# Main logic
g = gitit.Gitit()
if subcmd == 'init':
  g.init()
elif subcmd == 'new':
  g.new()
elif subcmd == 'list':
  g.list()
elif subcmd == 'edit':
  if len(params) != 1:
    log.printerr('usage: it edit <id>')
    sys.exit(1)
  g.edit(params[0])
elif subcmd == 'show':
  if len(params) != 1:
    log.printerr('usage: it show <id>')
    sys.exit(1)
  g.show(params[0])
