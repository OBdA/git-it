#!/usr/bin/python
#
# Command-line access to the base implementation of git-it.
#
import sys
import getopt
import gitit

def printerr(msg):
  sys.stderr.write('%s\n' % msg)

def usage():
  print 'usage: it <subcommand> [<options>]'
  print ''
  print 'Valid subcommands are:'
  print 'list      Shows a list of all issues.'
  print 'show      Shows details of a specific issue.'
  print 'new       Adds a new issue.'
  print ''
  print 'Changing status:'
  print 'open      Opens an issue.'
  print 'close     Closes an issue.'
  print 'reject    Rejects an issue.'

# Parse input options
opts = []
params = []
try:
  shorts = 'h'
  longs  = [ ]
  opts, params = getopt.getopt(sys.argv[1:], shorts, longs)
except getopt.GetoptError, e:
  printerr(e)
  usage()
  sys.exit(1)

# Set variables according to input options
for key, val in opts:
  if key in [ '-h' ]:
    usage()
    sys.exit(0)

# No subcommand?
if len(params) == 0:
  printerr('No subcommand specified.')
  usage()
  sys.exit(1)

# Valid subcommand?
subcmd = params[0]
if not subcmd in [ 'list', 'show', 'new', 'open', 'close', 'reject' ]:
  printerr('Unknown subcommand \'%s\'.' % subcmd)
  usage()
  sys.exit(1)

# Main logic
g = gitit.Gitit()
if subcmd == 'new':
  print g.new()
elif subcmd == 'list':
  tickets = g.list()
  for lineno, ticket in enumerate(tickets):
    print ticket.oneline(lineno + 1)
