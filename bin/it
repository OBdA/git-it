#!/usr/bin/env python
#vim: syntax=python fileencoding=utf-8 tabstop=4 expandtab shiftwidth=4
#
# Command-line access to the base implementation of git-it.
#
import sys, os
import getopt

# Point Python to the lib directory to include libraries
sys.path += [ os.path.abspath(sys.path[0] + '/..') + '/lib' ]
import gitit
import log

__version__ = '0.3-dev'

def usage():
    print("""
Usage: it <subcommand> [<options>]

Misc commands:
  help      Displays this help.
  version   Show version information.

Valid subcommands are:
  init      Initializes an area for storing issues.
  list      Shows a list of all issues.
  show      Shows details of a specific issue.
  new       Adds a new issue.
  edit      Edits an existing issue.
  rm -f     Removes an existing ticket.
  mv        Moves the given ticket to a release.
  sync      Retrieves all remote ticket changes.

Taking responsibility:
  take      Take responsibility for this ticket and put it
            in your INBOX (i.e. assign it to yourself).
  leave     Let go responsibility for this ticket and remove
            it from your INBOX.

Changing status:
  test      Mark a ticket as to-test.
  close     Mark a ticket as closed.
  fix       Mark a ticket as fixed.
  reject    Mark a ticket as rejected.
  reopen    Reopens an issue.
""")

# Get command line parameters
params = sys.argv[1:]

# No subcommand?
if len(params) == 0:
    log.printerr("No subcommand specified.")
    usage()
    sys.exit(1)

# Valid subcommand?
subcmd = params[0]
del params[0]
if not subcmd in [ 'help', 'version', 'init', 'list', 'show', 'new', 'edit', 'mv', 'rm', 'reopen', 'close', 'fix', 'reject', 'test', 'take', 'leave', 'sync' ]:
    log.printerr("Unknown subcommand '%s'." % subcmd)
    usage()
    sys.exit(1)

# Main logic
if subcmd == 'help':
    usage()
    sys.exit(0)
if subcmd == 'version':
    print("git-it %s" % __version__)
    sys.exit(0)

g = gitit.Gitit()
rc = 0
if subcmd == 'init':
    g.init()
elif subcmd == 'new':
    g.new()
elif subcmd == 'list':
    types = ['open', 'test']
    if len(params) > 0:
        if params[0] == '-a':
            types += [ 'closed', 'fixed', 'rejected' ]
            del params[0]
    releases = []
    if len(params) > 0:
        releases += params
    g.list(types, releases)
elif subcmd == 'edit':
    if len(params) != 1:
        log.printerr("Usage: it edit <id>")
        sys.exit(1)
    g.edit(params[0])
elif subcmd == 'show':
    if len(params) != 1:
        log.printerr("Usage: it show <id>")
        sys.exit(1)
    g.show(params[0])
elif subcmd == 'mv':
    if len(params) != 2:
        log.printerr("Usage: it mv <id> <release>")
        sys.exit(1)
    rc = g.mv(params[0], params[1])
elif subcmd == 'rm':
    if len(params) != 2 or params[0] != '-f':
        log.printerr("""
Tickets can be closed with either of the following subcommands:
  fix
  reject
  close

To permanently remove a ticket instead of closing it, use:
  it rm -f <id>
""")
        sys.exit(1)
    g.rm(params[1])
elif subcmd == 'close':
    if len(params) != 1:
        log.printerr("Usage: it close <id>")
        sys.exit(1)
    g.finish_ticket(params[0], 'closed')
elif subcmd == 'fix':
    if len(params) != 1:
        log.printerr("Usage: it fix <id>")
        sys.exit(1)
    g.finish_ticket(params[0], 'fixed')
elif subcmd == 'reject':
    if len(params) != 1:
        log.printerr("Usage: it reject <id>")
        sys.exit(1)
    g.finish_ticket(params[0], 'rejected')
elif subcmd == 'test':
    if len(params) != 1:
        log.printerr("Usage: it test <id>")
        sys.exit(1)
    g.finish_ticket(params[0], 'test')
elif subcmd == 'reopen':
    if len(params) != 1:
        log.printerr("Usage: it reopen <id>")
        sys.exit(1)
    g.reopen_ticket(params[0])
elif subcmd == 'take':
    if len(params) != 1:
        log.printerr("Usage: it take <id>")
        sys.exit(1)
    g.take_ticket(params[0])
elif subcmd == 'leave':
    if len(params) != 1:
        log.printerr("Usage: it leave <id>")
        sys.exit(1)
    g.leave_ticket(params[0])
elif subcmd == 'sync':
    g.sync()

sys.exit(rc)

#EOF
